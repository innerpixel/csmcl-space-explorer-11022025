<script setup>
import { computed } from 'vue'
import { useRouter } from 'vue-router'
import { useUserStore } from '../stores/user'

const props = defineProps({
  currentStep: {
    type: String,
    required: true
  }
})

const router = useRouter()
const userStore = useUserStore()

const steps = [
  { 
    id: 'identity',
    title: 'Identity',
    icon: '👤',
    path: '/onboarding/identity'
  },
  { 
    id: 'verification',
    title: 'Verification',
    icon: '🔐',
    path: '/onboarding/verification'
  },
  { 
    id: 'space-setup',
    title: 'Space',
    icon: '🌌',
    path: '/onboarding/space-setup'
  },
  { 
    id: 'csmcl-id',
    title: 'CSMCL.ID',
    icon: '🆔',
    path: '/onboarding/csmcl-id'
  },
  { 
    id: 'wallet',
    title: 'Wallet',
    icon: '💳',
    path: '/onboarding/wallet'
  },
  { 
    id: 'complete',
    title: 'Complete',
    icon: '🎉',
    path: '/onboarding/complete'
  }
]

const currentStepIndex = computed(() => {
  return steps.findIndex(step => step.id === props.currentStep)
})

const getStepStatus = (index) => {
  if (index < currentStepIndex.value) return 'completed'
  if (index === currentStepIndex.value) return 'current'
  return 'upcoming'
}

const canNavigateToStep = (stepId) => {
  switch (stepId) {
    case 'identity':
      return true
    case 'verification':
      return userStore.stepProgress.identity.completed
    case 'space-setup':
      return userStore.canProceedToSpace
    case 'csmcl-id':
      return userStore.canProceedToCsmclId
    case 'wallet':
      return userStore.canProceedToWallet
    case 'complete':
      return userStore.stepProgress.wallet.completed
    default:
      return false
  }
}

const navigateToStep = (step) => {
  if (canNavigateToStep(step.id)) {
    router.push(step.path)
  }
}
</script>

<template>
  <div class="max-w-4xl mx-auto">
    <nav aria-label="Progress">
      <ol
        role="list"
        class="flex items-center justify-between"
      >
        <li
          v-for="(step, index) in steps"
          :key="step.id"
          :class="[
            'relative flex-1',
            { 'cursor-pointer hover:opacity-80': canNavigateToStep(step.id) }
          ]"
          @click="navigateToStep(step)"
        >
          <!-- Connector Line -->
          <div
            v-if="index !== steps.length - 1"
            class="absolute top-5 left-7 -ml-px mt-0.5 h-0.5 w-full transition-all duration-300"
            :class="[
              getStepStatus(index) === 'completed'
                ? 'bg-blue-500'
                : getStepStatus(index) === 'current'
                  ? 'bg-gradient-to-r from-blue-500 to-gray-700'
                  : 'bg-gray-700'
            ]"
          />

          <!-- Step Circle -->
          <div
            class="group relative flex flex-col items-center"
            :class="{
              'opacity-50': !canNavigateToStep(step.id) && getStepStatus(index) !== 'completed'
            }"
          >
            <!-- Icon Circle -->
            <span
              class="flex h-10 w-10 items-center justify-center rounded-full border-2 transition-all duration-300"
              :class="[
                getStepStatus(index) === 'completed'
                  ? 'bg-blue-500 border-blue-500'
                  : getStepStatus(index) === 'current'
                    ? 'bg-blue-500/20 border-blue-500'
                    : canNavigateToStep(step.id)
                      ? 'bg-gray-800 border-gray-600 group-hover:border-gray-500'
                      : 'bg-gray-800/50 border-gray-700'
              ]"
            >
              <span
                v-if="getStepStatus(index) === 'completed'"
                class="text-white text-lg"
              >✓</span>
              <span
                v-else
                class="text-2xl"
                :class="[
                  getStepStatus(index) === 'current'
                    ? 'animate-pulse'
                    : ''
                ]"
              >{{ step.icon }}</span>
            </span>

            <!-- Step Title -->
            <span
              class="mt-2 text-sm font-medium transition-colors duration-300"
              :class="[
                getStepStatus(index) === 'completed'
                  ? 'text-blue-400'
                  : getStepStatus(index) === 'current'
                    ? 'text-white'
                    : canNavigateToStep(step.id)
                      ? 'text-gray-400 group-hover:text-gray-300'
                      : 'text-gray-600'
              ]"
            >
              {{ step.title }}
            </span>
          </div>
        </li>
      </ol>
    </nav>
  </div>
</template>

<style scoped>
.step-pulse {
  animation: step-pulse 2s cubic-bezier(0.4, 0, 0.6, 1) infinite;
}

@keyframes step-pulse {
  0%, 100% {
    opacity: 1;
  }
  50% {
    opacity: 0.5;
  }
}
</style>
